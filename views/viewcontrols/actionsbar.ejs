<div class="row actions-bar">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 palette">
        <button class="scroll scroll-left">❰</button>
        <ul class="actions-list list-inline">
            <li class="action">
                    <div class="colorwheel"></div>
            </li>
            <li class="action">
                <div class="dial">
                    <div class="innerdial">
                        <div class="shadow-circle opacity"></div>
                    </div>
                </div>
            </li>
          <li class="action">
                <div class="dial">
                    <div  class="innerdial">
                      <div class="shadow-circle mass">
                      </div>
                    </div>
                </div>
            </li>

            <li class="action">
                <div class="dial">
                    <div id="jog_dial_one" class="innerdial">
                      <div class="shadow-circle spin">

                      </div>
                    </div>
                </div>
            </li>

          <li class="action">
              <div class="dial">
                  <div  class="innerdial">
                    <div class="shadow-circle collide">

                    </div>
                  </div>
              </div>
          </li>
            <li class="action">
              <div class="dial">
                  <div  class="innerdial">
                    <div class="shadow-circle roam">
                    </div>
                  </div>
              </div>
          </li>


            <li class="action">
                <div class="dial">
                    <div  class="innerdial">
                      <div class="shadow-circle fade-in-out">

                      </div>
                    </div>
                </div>
            </li>
            <li class="action">
                <div class="dial">
                    <div  class="innerdial">
                      <div class="shadow-circle grow-shrink">

                      </div>
                    </div>
                </div>
            </li>
        </ul>

        <button class="scroll scroll-right">❱</button>
    </div>
</div>
<script type="text/javascript">

  var g_foo = false;

  var g_actionControlDials = [];

  function addActionControls() {

    // 0. OPACITY
    var elem = document.getElementsByClassName('opacity')[0];

    var dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
        var percent = 1 - (evt.target.degree/360);
        setOpacity(percent);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    var wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        showHideSelected();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });


    // 1. ROAMER
    elem = document.getElementsByClassName('roam')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var speed = Math.round(evt.target.degree/10);
      console.log("speeding..." + speed);
      setRoamSpeed(speed);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemoveRoam();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

    // 2. COLLIDER
    elem = document.getElementsByClassName('collide')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var speed = Math.round(evt.target.degree/10);
      console.log("colliding..." + speed);
      setRoamSpeed(speed);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemoveRoam(true);
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

    // 3. FADER
    elem = document.getElementsByClassName('fade-in-out')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var opacity = evt.target.degree/360;
      console.log("fading..." + opacity);
      setFaderValue(opacity);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemoveFader();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

    // 4. GROWER
    elem = document.getElementsByClassName('grow-shrink')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var size = evt.target.degree/10;
      console.log("growing..." + size);
      setGrowerValue(size);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemoveGrower();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

    // 5. SPINNER
    elem = document.getElementsByClassName('spin')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var velocity = Math.round(evt.target.degree/10);
      console.log("spinning..." + velocity);
      setSpinnerVelocity(velocity);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];

    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemoveSpinner();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

    // 6. MASS
    elem = document.getElementsByClassName('mass')[0];

    dial = JogDial(elem,
      {debug:false, wheelSize:'100%', knobSize:'40%', minDegree:0, maxDegree:360, degreeStartAt: 0});

    g_actionControlDials.push(dial);

    dial.on('mousemove', function(evt){
      var mass = Math.round(evt.target.degree/10);
      setMass(mass);
    });

    dial.on('mouseup', function(e) {
      g_foo = true;
    });

    wheel = elem.getElementsByClassName('shadow-circle_wheel')[0];
    wheel.addEventListener('click', function(e) {
      if (!g_foo) {
        addRemovePhysics();
        $(this.parentElement).toggleClass('active-toggle');
      }
      g_foo = false;
    });

  }

  function updateActionControls(part) {

    if (part == null || part == "undefined") return;

    console.log("updating controls for: " + part.getAttribute("name").getValueDirect().join(""));

    // MASS
    var angle = 0;

    angle = Math.round(part.physicalProperties.mass.getValueDirect())*10;

    if (part.physicsEnabled.getValueDirect() == true) {
      $('.mass').addClass('active-toggle');
      g_actionControlDials[6].knob.degree = angle; // due to mousemove trigger in JogDial angle function
      g_actionControlDials[6].angle(angle);
    } else {
      $('.mass').removeClass('active-toggle');
      g_actionControlDials[6].knob.degree = 0;
      g_actionControlDials[6].angle(0);
    }

    angle = 0;

    // OPACITY
    angle = (1 - part.opacity.getValueDirect())*360;

    console.log("opacity angle: " + angle);

    g_actionControlDials[0].knob.degree = angle; // due to mousemove trigger in JogDial angle function
    g_actionControlDials[0].angle(angle);

    // COLOR

  }
</script>
